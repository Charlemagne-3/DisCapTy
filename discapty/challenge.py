from typing import Any, Literal, TypedDict, Optional

from discapty import BUILTIN_GENERATORS

from .errors import TooManyRetriesError
from .generator import CaptchaGenerator, WheezyCaptcha, ImageCaptcha, TextCaptcha

class ChallengeOptions(TypedDict):
    retries: int


class Challenge:
    """
    Representation of a challenge. A challenge represent the user's Captcha challenge he must
    face.
    
    This class takes cares of:
        - Generating the captcha
        - Verify inputs
        - Manage the "Captcha" object
    
    It free your mind from managing all the process of a captcha challenge, keeping your code
    short and easy.
    """

    def __init__(self, captcha_type: Literal['wheezy', 'image', 'text'], *, retries: int, generator: Optional[CaptchaGenerator] = None) -> None:

        if captcha_type and generator:
            raise ValueError("You cannot specify both the captcha type and the generator at the same time.")

        self.is_active: bool = False
        self.code: str = "None"

        self.retries: int = retries or 3

        self.generator: CaptchaGenerator = captcha_type

    def begin(self):
        self.is_active = True

    def verify(self, code: str) -> bool:
        return code == self.code

    def generate(self) -> Any:
        """
        Generate the captcha of this challenge.
        """
        return self.generator.generate(self.code)

    def retry(self) -> Any:
        """
        Attempt to retry the Captcha challenge. This will increase the retry counter by 1.

        Raises
        ------
        TooManyRetriesError:
            If the retry limit is reached, raise this error.

        Returns
        -------
        Any: The new code. Generated by the generator.
        """
        if self.retries + 1 > self.retries:
            raise TooManyRetriesError
        self.retries += 1
        self.code = 
        return self.code
